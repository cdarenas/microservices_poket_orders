springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: se.poket.microservices.composite.order
  pathsToMatch: /**

api:

  common:
    version: 1.0.0
    title: Poket API
    description: API Rest for Order Management
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: support-it@poket.co

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  order-composite:

    get-composite-order:
      description: Returns a composite view of the specified order id
      notes: |
        # Normal response
        If the requested order id is found the method will return information regarding:
        1. Base order information
        1. Potfolio
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)

        ## Order id 113
        200 - Ok, but no portfolio will be returned

        ## Non numerical order id
        400 - A **Bad Request** error will be returned

        ## Order id 13
        404 - A **Not Found** error will be returned

        ## Negative order ids
        422 - An **Unprocessable Entity** error will be returned

    create-composite-order:
      description: Creates a composite order
      notes: |
        # Normal response
        The composite order information posted to the API will be 
        split up and stored as separate order-info and portfolio entity.

        # Expected error responses
        1. If a order with the same orderId as specified in the 
        posted information already exists, an **422 - Unprocessable 
        Entity** error with a "duplicate key" error message will be 
        Returned

    create-composite-orders:
      description: Create orders
      notes: |
        # Normal response

        # Expected error responses

server.port: 7001
server.error.include-message: always

spring.application.name: order-composite

app.eureka-server: localhost

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    orders-out-0:
      destination: orders
      producer:
        required-groups: auditGroup
    portfolios-out-0:
      destination: portfolios
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

ib.gateway:
  host: localhost
  port: 4002

logging:
  level:
    root: INFO
    se.magnus: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

---
spring.config.activate.on-profile: docker

server.port: 8080

app.eureka-server: eureka

spring.rabbitmq.host: rabbitmq

ib.gateway.host: 192.168.1.65

spring.cloud.stream.kafka.binder.brokers: kafka

